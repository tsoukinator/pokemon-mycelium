#  print("1")
value_list <- c(value_list,"#-------------------------------")
#row_data <- paste0("#-------------------------------","\n",new_moves[[j]][i])
row_data <- paste0(new_moves[[j]][i])
} else {
#  print("2")
row_data <- paste0(colnames(new_moves)[j]," = ",new_moves[[j]][i])
}
# print("3")
#data <- paste0(data,"\n",row_data)
value_list <- c(value_list,row_data)
#print(data)
}
}
}
# Combine new move details with old move file
combined_moves <- rbind(movelist_txt,data.frame(X1=value_list))
# Write out updated moves to PBS directory
lapply(combined_moves, write, "../PBS/moves.txt", append=FALSE, ncolumns=1)
############################################################################
############################# POKEMON LIST ################################
############################################################################
# Read moves from xls
pkmnstats_xls <- readxl::read_excel("PokeDB.xlsx", sheet = "PkmnStats")
# Remove anything without a HP value
pkmnstats_xls <- dplyr::filter(pkmnstats_xls, !is.na(`HP`))
pkmnstats_xls$Name <- trimws(pkmnstats_xls$Name)
pkmnstats_xls$Abilities <- trimws(pkmnstats_xls$Abilities)
pkmnstats_xls$HiddenAbilities <- trimws(pkmnstats_xls$HiddenAbilities)
pkmnstats_xls$Innates <- trimws(pkmnstats_xls$Innates)
pkmnstats_xls$Types <- trimws(pkmnstats_xls$Types)
pkmnstats_xls$Pokedex <- trimws(pkmnstats_xls$Pokedex)
pkmnstats_xls$Category <- trimws(pkmnstats_xls$Category)
# Calculate percentile rank of points values
pkmnstats_xls <- pkmnstats_xls %>%
mutate(HP_Pct = round((100 * rank(HP)/length(HP)),0), Attack_Pct = round((100 * rank(Attack)/length(Attack)),0), Def_Pct = round((100 * rank(Defence)/length(Defence)),0), SpAtk_Pct = round((100 * rank(`Special Attack`)/length(`Special Attack`)),0), SpDef_Pct = round((100 * rank(`Special Defence`)/length(`Special Defence`)),0), Speed_Pct = round((100 * rank(Speed)/length(Speed)),0))
###
## Load Pokemon PBS
og_pokemon_txt <- read_delim("./Original Backup Text Files/pokemon_tsouk.txt", delim = "\n", trim_ws = TRUE, col_names = FALSE)
# Split on Equals sign
og_pkmn_split <- data.frame(do.call('rbind', strsplit(as.character(og_pokemon_txt$X1),'=',fixed=TRUE)))
og_pkmn_split$X1 <- trimws(og_pkmn_split$X1)
og_pkmn_split$X2 <- trimws(og_pkmn_split$X2)
pkmn_name <- ''
og_pkmn_split$Name <- ''
# Add pokemon name to dataframe
for (i in 1:nrow(og_pkmn_split)) {
if (og_pkmn_split$X1[i] == "Name") {
pkmn_name <- og_pkmn_split$X2[i]
og_pkmn_split$Name[i-2] <- pkmn_name
og_pkmn_split$Name[i-1] <- pkmn_name
}
og_pkmn_split$Name[i] <- pkmn_name
}
# Assign ID order to existing Pokemon List
setDT(og_pkmn_split)[, id := .GRP, by = Name]
global_innate_abilities <- 'ARIESBATTLECHARGE,TAURUSHARDYBULL,GEMINIPARTYSTARTER,CANCERPROTECTIVESHELL,LEOPRIDEFULROAR,VIRGOPUREFOCUS,LIBRAHARMONYGUARD,SCORPIOVENOMSTARE,SAGITTARIUSSHARPEYE,CAPRICORNENDURINGWILL,AQUARIUSINNOVATIVESPARK,PISCESMYSTICVEIL'
#global_innate_abilities <- 'AQUARIUSINNOVATIVESPARK'
#'OWNTEMPO,LIMBER'
## Add hardcoded list of innates for all regular pokemon
og_pkmn_split <- rbind(setDT(og_pkmn_split), og_pkmn_split[, tail(.SD, 1) , by = id
][, c("X1", "X2") := .('Innates',  global_innate_abilities)
])[order(id)]
# Drop header/pokemon-less information
og_pkmn_split <- og_pkmn_split[og_pkmn_split$Name != "", ]
# If any data in PkmnStats excel, add them in below (filter for no pokedex number)
new_pkmn_stats <- filter(pkmnstats_xls, is.na(`Pokedex Number`))
## Create Stats column (HP,Atk,Def,Speed,SpA,SpD)
new_pkmn_stats$BaseStats <- paste(new_pkmn_stats$HP,new_pkmn_stats$Attack,new_pkmn_stats$Defence,new_pkmn_stats$Speed,new_pkmn_stats$`Special Attack`,new_pkmn_stats$`Special Defence`,sep=',')
## Keep columns
keep_cols <- c('Name','BaseStats','Types','Abilities','HiddenAbilities','Pokedex','Category','Evolutions','WildItemCommon','WildItemUncommon','Moves','GenderRatio','GrowthRate','BaseExp','EVs','CatchRate','Happiness','FormName','Height','Weight','EggGroups','HatchSteps')
#drop_cols <- c("HP","Attack","Defence","Special Attack","Special Defence","Speed","Base Stat Total")
pkmn_data = subset(new_pkmn_stats, select = keep_cols)
#as.data.frame(t(pkmn_data))
## Replace stats if match in pkmnstats_xls
#pkmn_data
# Use gather() to reshape the data
gather_pkmn <- gather(pkmn_data, key = "Column", value = "Value", -Name)
# Outer join on og data
pkmn_combine <- left_join(og_pkmn_split,gather_pkmn,by=c('Name'='Name','X1'='Column'))
## If there is data in the new column, replace the data in the old column
pkmn_combine$NewValue <- ifelse(!is.na(pkmn_combine$Value),pkmn_combine$Value,pkmn_combine$X2)
pkmn_combine$NewValue <- ifelse(pkmn_combine$NewValue==pkmn_combine$X1,'',pkmn_combine$NewValue)
pkmn_combine$NewValue <- gsub('#-------------------------------','',pkmn_combine$NewValue)
pkmn_combine$NewValue <- gsub('# See the documentation on the wiki to learn how to edit this file.','',pkmn_combine$NewValue)
pkmn_combine$NewValue <- ifelse(pkmn_combine$NewValue == "",'',paste0(' = ',pkmn_combine$NewValue))
pkmn_combine$Output <- paste0(pkmn_combine$X1,pkmn_combine$NewValue,sep="")
# Replace NA with 0
pkmn_combine[is.na(pkmn_combine)] <- ""
# Remove any fields forcibly nulled out by Excel file
pkmn_combine_drop_NONE <- filter(pkmn_combine, Value != 'NONE')
########################################################
########## GET EXCEL ONLY PKMN AND ADD THEM TO OUTPUT
library("data.table")
og_pkmn_dex <- og_pkmn_split
setDT(og_pkmn_dex)[ , ID := .GRP, by = Name]
new_pkmn_text <- filter(og_pkmn_dex, ID >= 900)
#new_pkmn_text <- filter(og_pkmn_dex, ID >= 900 & Name != "Lechonk" & Name != "Oinkologne")
#Need to properly upgrade to gen 9 mechanics..
text_list <- data.frame(Name = unique(new_pkmn_text$Name))
excel_list <- data.frame(Name = unique(gather_pkmn$Name))
## Find Pokemon only in Excel (and not in .txt file)
excel_only_pkmn <- anti_join(excel_list,text_list,by=c('Name'='Name'))
## Join back to Excel, and keep Pokemon only in excel - append to dataframe
excel_only_data <- left_join(excel_only_pkmn,gather_pkmn, by =c('Name'='Name'))
### INNATES -- IF NULL INNATES, ADD GLOBAL INNATE LIST
excel_only_data$Value <- ifelse(excel_only_data$Column == "Innates",ifelse(is.na(excel_only_data$Value),global_innate_abilities,excel_only_data$Value),excel_only_data$Value)
## Remove Null and NONE values
excel_fix <- filter(excel_only_data, !is.na(Value) & Value != 'NONE')
## Add output column to values
excel_fix$Output <- paste0(excel_fix$Column," = ",excel_fix$Value,sep="")
## Loop through frame, add header data
for (i in 1:nrow(excel_only_pkmn)) {
header <- data.frame(Output = c("#-------------------------------",paste0("[",toupper(gsub(" ", "", excel_only_pkmn$Name[i], fixed = TRUE)),"]",sep=""),paste0("Name = ",excel_only_pkmn$Name[i],sep="")))
new_row <- rbind(header,data.frame(Output = filter(excel_fix, Name == excel_only_pkmn$Name[i])$Output))
if (i == 1) {
new_excel_rows <- new_row
} else {
new_excel_rows <- rbind(new_excel_rows,new_row)
}
}
########################################################
########## GET EXCEL ONLY PKMN AND ADD THEM TO OUTPUT
final_output <- rbind(data.frame(Output = pkmn_combine_drop_NONE$Output), data.frame(Output = new_excel_rows$Output))
# Write out updated pokemon to PBS directory
lapply(as.data.frame(final_output$Output), write, "../PBS/pokemon.txt", append=FALSE, ncolumns=1)
############################################################################
############################# POKEMON FORMS ################################
############################################################################
og_pokemon_forms <- read_delim("./Original Backup Text Files/pokemon_forms.txt", delim = "\n", trim_ws = TRUE, col_names = FALSE)
# Read moves from xls
pkmnforms_xls <- readxl::read_excel("PokeDB.xlsx", sheet = "PkmnForms")
# Remove anything without a HP value
pkmnforms_xls <- dplyr::filter(pkmnforms_xls, Active == 1)
pkmnforms_xls$`Base Stat Total` <- NULL
pkmnforms_xls$Active <- NULL
## Create Stats column (HP,Atk,Def,Speed,SpA,SpD)
pkmnforms_xls$BaseStats <- paste(pkmnforms_xls$HP,pkmnforms_xls$Attack,pkmnforms_xls$Defence,pkmnforms_xls$Speed,pkmnforms_xls$`Special Attack`,pkmnforms_xls$`Special Defence`,sep=',')
# Remove other stats
pkmnforms_xls$HP <- NULL
pkmnforms_xls$Attack <- NULL
pkmnforms_xls$Defence <- NULL
pkmnforms_xls$`Special Attack` <- NULL
pkmnforms_xls$`Special Defence` <- NULL
pkmnforms_xls$Speed <- NULL
# Filter out NA base stats
pkmnforms_xls <- filter(pkmnforms_xls, BaseStats != "NA,NA,NA,NA,NA,NA")
# Use gather() to reshape the data
gather_forms <- gather(pkmnforms_xls, key = "Column", value = "Value", -Name)
gather_forms <- filter(gather_forms, Column != "Active")
gather_forms <- filter(gather_forms, !is.na(Value) & Value != 'NONE')
## Add output column to values
gather_forms$Output <- paste0(gather_forms$Column," = ",gather_forms$Value,sep="")
## Loop through frame, add header data
for (i in 1:nrow(pkmnforms_xls)) {
header <- data.frame(Output = c("#-------------------------------",paste0("[",toupper(pkmnforms_xls$Name[i]),"]",sep="")))
form_row <- rbind(header,data.frame(Output = filter(gather_forms, Name == pkmnforms_xls$Name[i])$Output))
if (i == 1) {
new_form_rows <- form_row
} else {
new_form_rows <- rbind(new_form_rows,form_row)
}
}
#new_form_rows$Output
########## APPEND TO ORIGINAL FORMS LIST, AND OUTPUT TO DIRECTORY
form_output <- rbind(data.frame(Output = og_pokemon_forms$X1), data.frame(Output = new_form_rows$Output))
# Write out updated pokemon to PBS directory
lapply(as.data.frame(form_output$Output), write, "../PBS/pokemon_forms.txt", append=FALSE, ncolumns=1)
#########################################################################
############################# INNATE SETS ###############################
#########################################################################
# Star sign list - can add multiple abilities within this set to provide more than 1 ability per set
star_sign_list <-  c('ARIESBATTLECHARGE','TAURUSHARDYBULL','GEMINIPARTYSTARTER','CANCERPROTECTIVESHELL','LEOPRIDEFULROAR','VIRGOPUREFOCUS','LIBRAHARMONYGUARD','SCORPIOVENOMSTARE','SAGITTARIUSSHARPEYE','CAPRICORNENDURINGWILL','AQUARIUSINNOVATIVESPARK','PISCESMYSTICVEIL')
#star_sign_list <- 'ARIESBATTLECHARGE'
#star_sign_list <-  c('LIMBER,OWNTEMPO','INTIMIDATE,VOLTABSORB')
#dog_innate_list <- 'AQUARIUSINNOVATIVESPARK,PICKUP,DOGARMY'
dog_innate_list <- c('ARIESBATTLECHARGE,PICKUP,DOGARMY','TAURUSHARDYBULL,PICKUP,DOGARMY','GEMINIPARTYSTARTER,PICKUP,DOGARMY','CANCERPROTECTIVESHELL,PICKUP,DOGARMY','LEOPRIDEFULROAR,PICKUP,DOGARMY','VIRGOPUREFOCUS,PICKUP,DOGARMY','LIBRAHARMONYGUARD,PICKUP,DOGARMY','SCORPIOVENOMSTARE,PICKUP,DOGARMY','SAGITTARIUSSHARPEYE,PICKUP,DOGARMY','CAPRICORNENDURINGWILL,PICKUP,DOGARMY','AQUARIUSINNOVATIVESPARK,PICKUP,DOGARMY','PISCESMYSTICVEIL,PICKUP,DOGARMY')
# Combine Pokemon and Form together into single dataframe
poke_list <- filter(final_output, substr(Output,0,1) == "[")
# Get form names, replace comma in form name with underscore
form_list <- filter(form_output, substr(Output,0,1) == "[")
form_list$Output <- gsub(",","_",form_list$Output)
all_pkmn_list <- rbind(poke_list, form_list)
# Create table of Pokemon with innates already assigned from XLS
#pkmn_with_innates = filter(pkmnstats_xls, !is.na(Innates))
pkmn_with_innates = filter(bind_rows(pkmnstats_xls,pkmnforms_xls), !is.na(Innates))
pkmn_with_innates$NAME_UPPER <- paste0("[",toupper(pkmn_with_innates$Name),"]")
###########
# Create new innate frame
innate_frame <- data.frame(Output = "#----------------------------------------")
## Loop through all pokemon and assign innates
for (i in 1:nrow(all_pkmn_list)) {
## Add Pokemon Name to List
innate_frame[nrow(innate_frame) + 1,] = c(all_pkmn_list$Output[i])
## Filter for any existing innates
existing_innates <- filter(pkmn_with_innates, NAME_UPPER == all_pkmn_list$Output[i])
# Add assigned innates from XLS (one set)
if (nrow(existing_innates) == 1) {
#print("HasInnate")
innate_frame[nrow(innate_frame) + 1,] = c(paste0("Innates = ",existing_innates$Innates))
}
# If Pokemon has no innates - generate the 16-set starsign set
else if (nrow(existing_innates) == 0) {
#print("NoInnate")
for (j in 1:length(star_sign_list)) {
if (all_pkmn_list$Output[i] %in% c("[EDGARMON]","[EDGARNATOR]","[RAGNARMON]","[RAGNARNATOR]","[ELSAMON]","[ELSANATOR]","[VUCKOMON]") ) {
innate_frame[nrow(innate_frame) + 1,] = c(paste0("Innates",j," = ",dog_innate_list[j]))
} else {
innate_frame[nrow(innate_frame) + 1,] = c(paste0("Innates",j," = ",star_sign_list[j]))
}
}
}
## End with line divide before next pkmn
innate_frame[nrow(innate_frame) + 1,] = c("#----------------------------------------")
}
## Output Innate Frame
lapply(as.data.frame(innate_frame$Output), write, "../PBS/innate_sets.txt", append=FALSE, ncolumns=1)
rm(list=ls())
library(dplyr)
library(tidyverse)
library(data.table)
library(googlesheets4)
library(readr)
gs4_auth(email = "anthony.tsoukas@gmail.com", scopes = "https://www.googleapis.com/auth/drive.readonly")
encounters <- read_sheet(ss = "https://docs.google.com/spreadsheets/d/1ifXHuiQUOqN2F-kTRnHBh8xJX98VI0NTl4pSU8XCIZM/", sheet = "RouteEncounters", skip = 0)[1:9]
# Replace Nulls in Max Level with Min Level, and Encounter Set with 1
encounters$MaxLevel <- ifelse(is.na(encounters$MaxLevel),encounters$MinLevel,encounters$MaxLevel)
encounters$`Encounter Set`[is.na(encounters$`Encounter Set`)] <- 0 # Null Encounter Version = 0
# Sort data prior to  output
encounters <- encounters[with(encounters, order(ID, `Encounter Set`, `Encounter Type`)), ]
encounter_pbs <- data.frame(Output = "#----------------------------------------")
encounters
loc_id <- ''
enc_id <- ''
for (i in 1:nrow(encounters)) {
## Check Map Location ID
if (loc_id != encounters$ID[i]) {
location <- paste0("[",encounters$ID[i],",",encounters$`Encounter Set`[i],"] # ",encounters$MapName[i])
encounter_pbs[nrow(encounter_pbs) + 1,] = c(location)
#print(location)
}
## Check Encounter Type
if (enc_id != encounters$`Encounter Type`[i] | loc_id != encounters$ID[i]) {
if (!is.na(encounters$Probability[i])) {
enc_type <- paste0(encounters$`Encounter Type`[i],",",encounters$Probability[i])
} else {
enc_type <- paste0(encounters$`Encounter Type`[i])
}
encounter_pbs[nrow(encounter_pbs) + 1,] = c(enc_type)
#print(enc_type)
}
# Output Pokemon encounters as per normal
pkmn_encounter <- paste0("    ",encounters$`Encounter Chance`[i],",",encounters$Pokemon[i],",",encounters$MinLevel[i],",",encounters$MaxLevel[i])
encounter_pbs[nrow(encounter_pbs) + 1,] = c(pkmn_encounter)
#print(pkmn_encounter)
# Update last seen row id for file outputting
loc_id <- encounters$ID[i]
enc_id <- encounters$`Encounter Type`[i]
}
## Output Encounters Frame
lapply(as.data.frame(encounter_pbs$Output), write, "../PBS/encounters_tsouk.txt", append=FALSE, ncolumns=1)
####################################
### Trainers
####################################
trainers <- read_sheet(ss = "https://docs.google.com/spreadsheets/d/1ifXHuiQUOqN2F-kTRnHBh8xJX98VI0NTl4pSU8XCIZM/", sheet = "Trainers", skip = 0)#[1:24]
# Create value for FORM if Pokemon contains ID
trainers$Form <- ifelse(grepl("_", trainers$Pokemon),
sapply(str_split(trainers$Pokemon, "_"), function(x) x[2]),
NA)
# For Null Sets, replace with 0
trainers$Set <- ifelse(is.na(trainers$Set),0,trainers$Set)
# For Null genders, randomise male/female
trainers$Gender <- ifelse(is.na(trainers$Gender),ifelse(round(runif(n=nrow(trainers)),0)==1,"male","female"),trainers$Gender)
# Enforce 1/1000 Shinyness
trainers$Shiny <- ifelse(is.na(trainers$Shiny),ifelse(round(runif(n=nrow(trainers)),3)>=0.999,"true","false"),trainers$Shiny)
# Enforce 15/20 IVs? (leaders/rivals only?)
trainers$IV <- ifelse(is.na(trainers$IV), ifelse(grepl("LEADER_",trainers$TrainerType),"20,20,20,20,20,20",trainers$IV),trainers$IV)
trainers$IV <- ifelse(is.na(trainers$IV), ifelse(grepl("RIVAL_",trainers$TrainerType),"20,20,20,20,20,20",trainers$IV),trainers$IV)
# Sort Data prior to output
trainers <- trainers[with(trainers, order(TrainerName, TrainerType, Set)), ]
####### Prepare Data for PBS File ##########
trainer_pbs <- data.frame(Output = character())
trainer_id = ''
cur_trainer_id = ''
trainer_battle_code = ''
i <- 1
for (i in 1:nrow(trainers)) {
#print(i)
cur_trainer_id <- paste0("[",trainers$TrainerType[i],",",trainers$TrainerName[i],",",trainers$Set[i],"]")
if (trainer_id != cur_trainer_id) {
# Add Breaking Line at start of each trainer
trainer_pbs[nrow(trainer_pbs) + 1,] = c("#-------------------------------")
trainer_id <- cur_trainer_id
trainer_battle_code <- paste0("            #---- TrainerBattle.start(:",trainers$TrainerType[i],',"',trainers$TrainerName[i],'",',trainers$Set[i],")")
## Create Trainer Header row + helper battler code for conditional event script
trainer_pbs[nrow(trainer_pbs) + 1,] = c(paste0(trainer_id,trainer_battle_code))
# Load trainer items and losetext if exists
for (j in 5:6) {
if (!is.na(trainers[,j][i,])) {
trainer_pbs[nrow(trainer_pbs) + 1,] = c(paste0(colnames(trainers[j])," = ",trainers[,j][i,]))
}
}
}
# Add line break before pokemon
trainer_pbs[nrow(trainer_pbs) + 1,] = c("#--------------")
# Load Pokemon Name and level (no identation)
trainer_pbs[nrow(trainer_pbs) + 1,] = c(paste0(colnames(trainers[7])," = ",trainers[,7][i,],",",trainers[,8][i,]))
# Load Pokemon data (with identation)
for (k in 9:ncol(trainers)) {
if (!is.na(trainers[,k][i,])) {
trainer_pbs[nrow(trainer_pbs) + 1,] = c(paste0("    ",colnames(trainers[k])," = ",trainers[,k][i,]))
}
}
}
## Output Trainer Frame
lapply(as.data.frame(trainer_pbs$Output), write, "../PBS/trainers_tsouk.txt", append=FALSE, ncolumns=1)
library(dplyr)
library(tidyverse)
library(data.table)
library(googlesheets4)
library(readr)
gs4_auth(email = "anthony.tsoukas@gmail.com", scopes = "https://www.googleapis.com/auth/drive.readonly")
encounters <- read_sheet(ss = "https://docs.google.com/spreadsheets/d/1ifXHuiQUOqN2F-kTRnHBh8xJX98VI0NTl4pSU8XCIZM/", sheet = "RouteEncounters", skip = 0)[1:9]
# Replace Nulls in Max Level with Min Level, and Encounter Set with 1
encounters$MaxLevel <- ifelse(is.na(encounters$MaxLevel),encounters$MinLevel,encounters$MaxLevel)
encounters$`Encounter Set`[is.na(encounters$`Encounter Set`)] <- 0 # Null Encounter Version = 0
# Sort data prior to  output
encounters <- encounters[with(encounters, order(ID, `Encounter Set`, `Encounter Type`)), ]
encounter_pbs <- data.frame(Output = "#----------------------------------------")
encounters
loc_id <- ''
enc_id <- ''
for (i in 1:nrow(encounters)) {
## Check Map Location ID
if (loc_id != encounters$ID[i]) {
location <- paste0("[",encounters$ID[i],",",encounters$`Encounter Set`[i],"] # ",encounters$MapName[i])
encounter_pbs[nrow(encounter_pbs) + 1,] = c(location)
#print(location)
}
## Check Encounter Type
if (enc_id != encounters$`Encounter Type`[i] | loc_id != encounters$ID[i]) {
if (!is.na(encounters$Probability[i])) {
enc_type <- paste0(encounters$`Encounter Type`[i],",",encounters$Probability[i])
} else {
enc_type <- paste0(encounters$`Encounter Type`[i])
}
encounter_pbs[nrow(encounter_pbs) + 1,] = c(enc_type)
#print(enc_type)
}
# Output Pokemon encounters as per normal
pkmn_encounter <- paste0("    ",encounters$`Encounter Chance`[i],",",encounters$Pokemon[i],",",encounters$MinLevel[i],",",encounters$MaxLevel[i])
encounter_pbs[nrow(encounter_pbs) + 1,] = c(pkmn_encounter)
#print(pkmn_encounter)
# Update last seen row id for file outputting
loc_id <- encounters$ID[i]
enc_id <- encounters$`Encounter Type`[i]
}
## Output Encounters Frame
lapply(as.data.frame(encounter_pbs$Output), write, "../PBS/encounters_tsouk.txt", append=FALSE, ncolumns=1)
####################################
### Trainers
####################################
trainers <- read_sheet(ss = "https://docs.google.com/spreadsheets/d/1ifXHuiQUOqN2F-kTRnHBh8xJX98VI0NTl4pSU8XCIZM/", sheet = "Trainers", skip = 0)#[1:24]
# Create value for FORM if Pokemon contains ID
trainers$Form <- ifelse(grepl("_", trainers$Pokemon),
sapply(str_split(trainers$Pokemon, "_"), function(x) x[2]),
NA)
# For Null Sets, replace with 0
trainers$Set <- ifelse(is.na(trainers$Set),0,trainers$Set)
# For Null genders, randomise male/female
trainers$Gender <- ifelse(is.na(trainers$Gender),ifelse(round(runif(n=nrow(trainers)),0)==1,"male","female"),trainers$Gender)
# Enforce 1/1000 Shinyness
trainers$Shiny <- ifelse(is.na(trainers$Shiny),ifelse(round(runif(n=nrow(trainers)),3)>=0.999,"true","false"),trainers$Shiny)
# Enforce 15/20 IVs? (leaders/rivals only?)
trainers$IV <- ifelse(is.na(trainers$IV), ifelse(grepl("LEADER_",trainers$TrainerType),"20,20,20,20,20,20",trainers$IV),trainers$IV)
trainers$IV <- ifelse(is.na(trainers$IV), ifelse(grepl("RIVAL_",trainers$TrainerType),"20,20,20,20,20,20",trainers$IV),trainers$IV)
# Sort Data prior to output
trainers <- trainers[with(trainers, order(TrainerName, TrainerType, Set)), ]
####### Prepare Data for PBS File ##########
trainer_pbs <- data.frame(Output = character())
trainer_id = ''
cur_trainer_id = ''
trainer_battle_code = ''
i <- 1
for (i in 1:nrow(trainers)) {
#print(i)
cur_trainer_id <- paste0("[",trainers$TrainerType[i],",",trainers$TrainerName[i],",",trainers$Set[i],"]")
if (trainer_id != cur_trainer_id) {
# Add Breaking Line at start of each trainer
trainer_pbs[nrow(trainer_pbs) + 1,] = c("#-------------------------------")
trainer_id <- cur_trainer_id
trainer_battle_code <- paste0("            #---- TrainerBattle.start(:",trainers$TrainerType[i],',"',trainers$TrainerName[i],'",',trainers$Set[i],")")
## Create Trainer Header row + helper battler code for conditional event script
trainer_pbs[nrow(trainer_pbs) + 1,] = c(paste0(trainer_id,trainer_battle_code))
# Load trainer items and losetext if exists
for (j in 5:6) {
if (!is.na(trainers[,j][i,])) {
trainer_pbs[nrow(trainer_pbs) + 1,] = c(paste0(colnames(trainers[j])," = ",trainers[,j][i,]))
}
}
}
# Add line break before pokemon
trainer_pbs[nrow(trainer_pbs) + 1,] = c("#--------------")
# Load Pokemon Name and level (no identation)
trainer_pbs[nrow(trainer_pbs) + 1,] = c(paste0(colnames(trainers[7])," = ",trainers[,7][i,],",",trainers[,8][i,]))
# Load Pokemon data (with identation)
for (k in 9:ncol(trainers)) {
if (!is.na(trainers[,k][i,])) {
trainer_pbs[nrow(trainer_pbs) + 1,] = c(paste0("    ",colnames(trainers[k])," = ",trainers[,k][i,]))
}
}
}
## Output Trainer Frame
lapply(as.data.frame(trainer_pbs$Output), write, "../PBS/trainers_tsouk.txt", append=FALSE, ncolumns=1)
library(dplyr)
library(tidyverse)
library(data.table)
library(googlesheets4)
library(readr)
gs4_auth(email = "anthony.tsoukas@gmail.com", scopes = "https://www.googleapis.com/auth/drive.readonly")
encounters <- read_sheet(ss = "https://docs.google.com/spreadsheets/d/1ifXHuiQUOqN2F-kTRnHBh8xJX98VI0NTl4pSU8XCIZM/", sheet = "RouteEncounters", skip = 0)[1:9]
# Replace Nulls in Max Level with Min Level, and Encounter Set with 1
encounters$MaxLevel <- ifelse(is.na(encounters$MaxLevel),encounters$MinLevel,encounters$MaxLevel)
encounters$`Encounter Set`[is.na(encounters$`Encounter Set`)] <- 0 # Null Encounter Version = 0
# Sort data prior to  output
encounters <- encounters[with(encounters, order(ID, `Encounter Set`, `Encounter Type`)), ]
encounter_pbs <- data.frame(Output = "#----------------------------------------")
encounters
loc_id <- ''
enc_id <- ''
for (i in 1:nrow(encounters)) {
## Check Map Location ID
if (loc_id != encounters$ID[i]) {
location <- paste0("[",encounters$ID[i],",",encounters$`Encounter Set`[i],"] # ",encounters$MapName[i])
encounter_pbs[nrow(encounter_pbs) + 1,] = c(location)
#print(location)
}
## Check Encounter Type
if (enc_id != encounters$`Encounter Type`[i] | loc_id != encounters$ID[i]) {
if (!is.na(encounters$Probability[i])) {
enc_type <- paste0(encounters$`Encounter Type`[i],",",encounters$Probability[i])
} else {
enc_type <- paste0(encounters$`Encounter Type`[i])
}
encounter_pbs[nrow(encounter_pbs) + 1,] = c(enc_type)
#print(enc_type)
}
# Output Pokemon encounters as per normal
pkmn_encounter <- paste0("    ",encounters$`Encounter Chance`[i],",",encounters$Pokemon[i],",",encounters$MinLevel[i],",",encounters$MaxLevel[i])
encounter_pbs[nrow(encounter_pbs) + 1,] = c(pkmn_encounter)
#print(pkmn_encounter)
# Update last seen row id for file outputting
loc_id <- encounters$ID[i]
enc_id <- encounters$`Encounter Type`[i]
}
## Output Encounters Frame
lapply(as.data.frame(encounter_pbs$Output), write, "../PBS/encounters_tsouk.txt", append=FALSE, ncolumns=1)
####################################
### Trainers
####################################
trainers <- read_sheet(ss = "https://docs.google.com/spreadsheets/d/1ifXHuiQUOqN2F-kTRnHBh8xJX98VI0NTl4pSU8XCIZM/", sheet = "Trainers", skip = 0)#[1:24]
# Create value for FORM if Pokemon contains ID
trainers$Form <- ifelse(grepl("_", trainers$Pokemon),
sapply(str_split(trainers$Pokemon, "_"), function(x) x[2]),
NA)
# For Null Sets, replace with 0
trainers$Set <- ifelse(is.na(trainers$Set),0,trainers$Set)
# For Null genders, randomise male/female
trainers$Gender <- ifelse(is.na(trainers$Gender),ifelse(round(runif(n=nrow(trainers)),0)==1,"male","female"),trainers$Gender)
# Enforce 1/1000 Shinyness
trainers$Shiny <- ifelse(is.na(trainers$Shiny),ifelse(round(runif(n=nrow(trainers)),3)>=0.999,"true","false"),trainers$Shiny)
# Enforce 15/20 IVs? (leaders/rivals only?)
trainers$IV <- ifelse(is.na(trainers$IV), ifelse(grepl("LEADER_",trainers$TrainerType),"20,20,20,20,20,20",trainers$IV),trainers$IV)
trainers$IV <- ifelse(is.na(trainers$IV), ifelse(grepl("RIVAL_",trainers$TrainerType),"20,20,20,20,20,20",trainers$IV),trainers$IV)
# Sort Data prior to output
trainers <- trainers[with(trainers, order(TrainerName, TrainerType, Set)), ]
####### Prepare Data for PBS File ##########
trainer_pbs <- data.frame(Output = character())
trainer_id = ''
cur_trainer_id = ''
trainer_battle_code = ''
i <- 1
for (i in 1:nrow(trainers)) {
#print(i)
cur_trainer_id <- paste0("[",trainers$TrainerType[i],",",trainers$TrainerName[i],",",trainers$Set[i],"]")
if (trainer_id != cur_trainer_id) {
# Add Breaking Line at start of each trainer
trainer_pbs[nrow(trainer_pbs) + 1,] = c("#-------------------------------")
trainer_id <- cur_trainer_id
trainer_battle_code <- paste0("            #---- TrainerBattle.start(:",trainers$TrainerType[i],',"',trainers$TrainerName[i],'",',trainers$Set[i],")")
## Create Trainer Header row + helper battler code for conditional event script
trainer_pbs[nrow(trainer_pbs) + 1,] = c(paste0(trainer_id,trainer_battle_code))
# Load trainer items and losetext if exists
for (j in 5:6) {
if (!is.na(trainers[,j][i,])) {
trainer_pbs[nrow(trainer_pbs) + 1,] = c(paste0(colnames(trainers[j])," = ",trainers[,j][i,]))
}
}
}
# Add line break before pokemon
trainer_pbs[nrow(trainer_pbs) + 1,] = c("#--------------")
# Load Pokemon Name and level (no identation)
trainer_pbs[nrow(trainer_pbs) + 1,] = c(paste0(colnames(trainers[7])," = ",trainers[,7][i,],",",trainers[,8][i,]))
# Load Pokemon data (with identation)
for (k in 9:ncol(trainers)) {
if (!is.na(trainers[,k][i,])) {
trainer_pbs[nrow(trainer_pbs) + 1,] = c(paste0("    ",colnames(trainers[k])," = ",trainers[,k][i,]))
}
}
}
## Output Trainer Frame
lapply(as.data.frame(trainer_pbs$Output), write, "../PBS/trainers_tsouk.txt", append=FALSE, ncolumns=1)
